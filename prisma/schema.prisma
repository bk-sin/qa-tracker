// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  role         Role     @default(TESTER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isActive     Boolean  @default(true)
  profileImage String?
  department   String?
  phone        String?

  // Relations
  reportedBugReports BugReport[] @relation("ReportedBy")
  assignedBugReports BugReport[] @relation("AssignedTo")
  createdTestCases   TestCase[]  @relation("CreatedBy")
  testResults        TestResult[]

  @@map("users")
}

model BugReport {
  id                String       @id @default(cuid())
  title             String
  description       String
  stepsToReproduce  String[]
  severity          Severity     @default(MEDIUM)
  status            BugStatus    @default(OPEN)
  priority          Priority     @default(MEDIUM)
  projectId         String
  reportedBy        String
  assignedTo        String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations
  reportedByUser    User         @relation("ReportedBy", fields: [reportedBy], references: [id])
  assignedToUser    User?        @relation("AssignedTo", fields: [assignedTo], references: [id])

  @@map("bug_reports")
}

model TestCase {
  id          String       @id @default(cuid())
  title       String
  description String?
  steps       String[]
  expected    String
  priority    Priority     @default(MEDIUM)
  status      TestCaseStatus @default(ACTIVE)
  projectId   String
  createdBy   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  createdByUser User         @relation("CreatedBy", fields: [createdBy], references: [id])
  testResults   TestResult[]

  @@map("test_cases")
}

model Section {
  id     String  @id @default(cuid())
  name   String
  issues Issue[]

  @@map("sections")
}

model Issue {
  id          Int          @id @default(autoincrement())
  description String
  priority    IssuePriority
  assignedTo  String
  createdAt   DateTime     @default(now())
  lastUpdated DateTime     @updatedAt
  sectionId   String

  // Relations
  section     Section      @relation(fields: [sectionId], references: [id])
  testResults TestResult[]

  @@map("issues")
}

model TestResult {
  id         String           @id @default(cuid())
  status     TestResultStatus
  note       String
  tester     String
  date       DateTime         @default(now())
  testCaseId String?
  issueId    Int?

  // Relations
  testerUser User      @relation(fields: [tester], references: [id])
  testCase   TestCase? @relation(fields: [testCaseId], references: [id])
  issue      Issue?    @relation(fields: [issueId], references: [id])

  @@map("test_results")
}

// Enums
enum Role {
  ADMIN
  PROJECT_MANAGER
  TESTER
  DEVELOPER
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum BugStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  REOPENED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum TestCaseStatus {
  ACTIVE
  INACTIVE
  DEPRECATED
}

enum IssuePriority {
  low
  medium
  high
}

enum TestResultStatus {
  pending
  resolved
}
